"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * API админской части
 * Авторизация для запросов происходит через `Authorization` ввиде передачи логина и пароля в __base64__. Формат передачи __Basic login:password__
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const portableFetch = require("portable-fetch");
const BASE_PATH = '/';
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = portableFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * AccountApi - fetch parameter creator
 * @export
 */
exports.AccountApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Удаление аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDelete(accountId, options = {}) {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling accountDelete.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации об аккаунте
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGet(accountId, options = {}) {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling accountGet.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Создание аккаунта
         * @param {ReqPostAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling accountPost.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ReqPostAccount" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Изменение данных аккаунта
         * @param {ReqPutAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPut(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling accountPut.');
            }
            const localVarPath = `/account`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ReqPutAccount" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации об аккаунтах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(offset, limit, options = {}) {
            const localVarPath = `/accounts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации о баллах аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyscoreGet(accountId, offset, limit, options = {}) {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId', 'Required parameter accountId was null or undefined when calling historyscoreGet.');
            }
            const localVarPath = `/historyscore`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (accountId !== undefined) {
                localVarQueryParameter['account_id'] = accountId;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Удаление картинки слайда на главном экране
         * @param {number} fileId Идентификатор картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainDelete(fileId, options = {}) {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling picturesmainDelete.');
            }
            const localVarPath = `/picturesmain`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Список идентификаторов картинок для слайда на главном экране
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainGet(options = {}) {
            const localVarPath = `/picturesmain`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Добавление картинок для слайда на главном экране
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainPost(picture, options = {}) {
            // verify required parameter 'picture' is not null or undefined
            if (picture === null || picture === undefined) {
                throw new RequiredError('picture', 'Required parameter picture was null or undefined when calling picturesmainPost.');
            }
            const localVarPath = `/picturesmain`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (picture !== undefined) {
                localVarFormParams.set('picture', picture);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AccountApi - functional programming interface
 * @export
 */
exports.AccountApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Удаление аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDelete(accountId, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountDelete(accountId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации об аккаунте
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGet(accountId, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountGet(accountId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Создание аккаунта
         * @param {ReqPostAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPost(body, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountPost(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Изменение данных аккаунта
         * @param {ReqPutAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPut(body, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountPut(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации об аккаунтах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(offset, limit, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).accountsGet(offset, limit, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации о баллах аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyscoreGet(accountId, offset, limit, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).historyscoreGet(accountId, offset, limit, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Удаление картинки слайда на главном экране
         * @param {number} fileId Идентификатор картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainDelete(fileId, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).picturesmainDelete(fileId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Список идентификаторов картинок для слайда на главном экране
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainGet(options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).picturesmainGet(options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Добавление картинок для слайда на главном экране
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainPost(picture, options) {
            const localVarFetchArgs = exports.AccountApiFetchParamCreator(configuration).picturesmainPost(picture, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AccountApi - factory interface
 * @export
 */
exports.AccountApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Удаление аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDelete(accountId, options) {
            return exports.AccountApiFp(configuration).accountDelete(accountId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации об аккаунте
         * @param {number} accountId Идентификатор аккаунта
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountGet(accountId, options) {
            return exports.AccountApiFp(configuration).accountGet(accountId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Создание аккаунта
         * @param {ReqPostAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPost(body, options) {
            return exports.AccountApiFp(configuration).accountPost(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Изменение данных аккаунта
         * @param {ReqPutAccount} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountPut(body, options) {
            return exports.AccountApiFp(configuration).accountPut(body, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации об аккаунтах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGet(offset, limit, options) {
            return exports.AccountApiFp(configuration).accountsGet(offset, limit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации о баллах аккаунта
         * @param {number} accountId Идентификатор аккаунта
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historyscoreGet(accountId, offset, limit, options) {
            return exports.AccountApiFp(configuration).historyscoreGet(accountId, offset, limit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Удаление картинки слайда на главном экране
         * @param {number} fileId Идентификатор картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainDelete(fileId, options) {
            return exports.AccountApiFp(configuration).picturesmainDelete(fileId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Список идентификаторов картинок для слайда на главном экране
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainGet(options) {
            return exports.AccountApiFp(configuration).picturesmainGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Добавление картинок для слайда на главном экране
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        picturesmainPost(picture, options) {
            return exports.AccountApiFp(configuration).picturesmainPost(picture, options)(fetch, basePath);
        },
    };
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
class AccountApi extends BaseAPI {
    /**
     *
     * @summary Удаление аккаунта
     * @param {number} accountId Идентификатор аккаунта
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountDelete(accountId, options) {
        return exports.AccountApiFp(this.configuration).accountDelete(accountId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации об аккаунте
     * @param {number} accountId Идентификатор аккаунта
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountGet(accountId, options) {
        return exports.AccountApiFp(this.configuration).accountGet(accountId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Создание аккаунта
     * @param {ReqPostAccount} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountPost(body, options) {
        return exports.AccountApiFp(this.configuration).accountPost(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Изменение данных аккаунта
     * @param {ReqPutAccount} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountPut(body, options) {
        return exports.AccountApiFp(this.configuration).accountPut(body, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации об аккаунтах
     * @param {number} [offset] Смещение получения записей
     * @param {number} [limit] Лимит получения записей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    accountsGet(offset, limit, options) {
        return exports.AccountApiFp(this.configuration).accountsGet(offset, limit, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации о баллах аккаунта
     * @param {number} accountId Идентификатор аккаунта
     * @param {number} [offset] Смещение получения записей
     * @param {number} [limit] Лимит получения записей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    historyscoreGet(accountId, offset, limit, options) {
        return exports.AccountApiFp(this.configuration).historyscoreGet(accountId, offset, limit, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Удаление картинки слайда на главном экране
     * @param {number} fileId Идентификатор картинки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    picturesmainDelete(fileId, options) {
        return exports.AccountApiFp(this.configuration).picturesmainDelete(fileId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Список идентификаторов картинок для слайда на главном экране
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    picturesmainGet(options) {
        return exports.AccountApiFp(this.configuration).picturesmainGet(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Добавление картинок для слайда на главном экране
     * @param {any} picture Картинка
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    picturesmainPost(picture, options) {
        return exports.AccountApiFp(this.configuration).picturesmainPost(picture, options)(this.fetch, this.basePath);
    }
}
exports.AccountApi = AccountApi;
/**
 * CategoryApi - fetch parameter creator
 * @export
 */
exports.CategoryApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Получение информации о курсах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(offset, limit, options = {}) {
            const localVarPath = `/categories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Удаление курса
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryDelete(categoryId, options = {}) {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling categoryDelete.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации о курсе
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryGet(categoryId, options = {}) {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling categoryGet.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Создание курса
         * @param {string} json JSON объект ReqPostCategory
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPost(json, picture, options = {}) {
            // verify required parameter 'json' is not null or undefined
            if (json === null || json === undefined) {
                throw new RequiredError('json', 'Required parameter json was null or undefined when calling categoryPost.');
            }
            // verify required parameter 'picture' is not null or undefined
            if (picture === null || picture === undefined) {
                throw new RequiredError('picture', 'Required parameter picture was null or undefined when calling categoryPost.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (json !== undefined) {
                localVarFormParams.set('json', json);
            }
            if (picture !== undefined) {
                localVarFormParams.set('picture', picture);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Изменение данных курса
         * @param {string} json JSON объект ReqPutCategory
         * @param {any} [picture] Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPut(json, picture, options = {}) {
            // verify required parameter 'json' is not null or undefined
            if (json === null || json === undefined) {
                throw new RequiredError('json', 'Required parameter json was null or undefined when calling categoryPut.');
            }
            const localVarPath = `/category`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (json !== undefined) {
                localVarFormParams.set('json', json);
            }
            if (picture !== undefined) {
                localVarFormParams.set('picture', picture);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Удаление видео из курса
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoDelete(categoryVideoId, options = {}) {
            // verify required parameter 'categoryVideoId' is not null or undefined
            if (categoryVideoId === null || categoryVideoId === undefined) {
                throw new RequiredError('categoryVideoId', 'Required parameter categoryVideoId was null or undefined when calling categoryvideoDelete.');
            }
            const localVarPath = `/categoryvideo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (categoryVideoId !== undefined) {
                localVarQueryParameter['category_video_id'] = categoryVideoId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации о видео в курсе
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoGet(categoryVideoId, options = {}) {
            // verify required parameter 'categoryVideoId' is not null or undefined
            if (categoryVideoId === null || categoryVideoId === undefined) {
                throw new RequiredError('categoryVideoId', 'Required parameter categoryVideoId was null or undefined when calling categoryvideoGet.');
            }
            const localVarPath = `/categoryvideo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (categoryVideoId !== undefined) {
                localVarQueryParameter['category_video_id'] = categoryVideoId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Создание видео в курсе
         * @param {string} json JSON объект ReqPostCategoryVideo
         * @param {any} picture Картинка
         * @param {any} video Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPost(json, picture, video, options = {}) {
            // verify required parameter 'json' is not null or undefined
            if (json === null || json === undefined) {
                throw new RequiredError('json', 'Required parameter json was null or undefined when calling categoryvideoPost.');
            }
            // verify required parameter 'picture' is not null or undefined
            if (picture === null || picture === undefined) {
                throw new RequiredError('picture', 'Required parameter picture was null or undefined when calling categoryvideoPost.');
            }
            // verify required parameter 'video' is not null or undefined
            if (video === null || video === undefined) {
                throw new RequiredError('video', 'Required parameter video was null or undefined when calling categoryvideoPost.');
            }
            const localVarPath = `/categoryvideo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (json !== undefined) {
                localVarFormParams.set('json', json);
            }
            if (picture !== undefined) {
                localVarFormParams.set('picture', picture);
            }
            if (video !== undefined) {
                localVarFormParams.set('video', video);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Изменение данных видео в курсе
         * @param {string} json JSON объект ReqPutCategoryVideo
         * @param {any} [picture] Картинка
         * @param {any} [video] Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPut(json, picture, video, options = {}) {
            // verify required parameter 'json' is not null or undefined
            if (json === null || json === undefined) {
                throw new RequiredError('json', 'Required parameter json was null or undefined when calling categoryvideoPut.');
            }
            const localVarPath = `/categoryvideo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new url.URLSearchParams();
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (json !== undefined) {
                localVarFormParams.set('json', json);
            }
            if (picture !== undefined) {
                localVarFormParams.set('picture', picture);
            }
            if (video !== undefined) {
                localVarFormParams.set('video', video);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получение информации о видео курса
         * @param {number} categoryId Идентификатор курса
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideosGet(categoryId, offset, limit, options = {}) {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId', 'Required parameter categoryId was null or undefined when calling categoryvideosGet.');
            }
            const localVarPath = `/categoryvideos`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CategoryApi - functional programming interface
 * @export
 */
exports.CategoryApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Получение информации о курсах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(offset, limit, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoriesGet(offset, limit, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Удаление курса
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryDelete(categoryId, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryDelete(categoryId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации о курсе
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryGet(categoryId, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryGet(categoryId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Создание курса
         * @param {string} json JSON объект ReqPostCategory
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPost(json, picture, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryPost(json, picture, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Изменение данных курса
         * @param {string} json JSON объект ReqPutCategory
         * @param {any} [picture] Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPut(json, picture, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryPut(json, picture, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Удаление видео из курса
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoDelete(categoryVideoId, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryvideoDelete(categoryVideoId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации о видео в курсе
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoGet(categoryVideoId, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryvideoGet(categoryVideoId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Создание видео в курсе
         * @param {string} json JSON объект ReqPostCategoryVideo
         * @param {any} picture Картинка
         * @param {any} video Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPost(json, picture, video, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryvideoPost(json, picture, video, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Изменение данных видео в курсе
         * @param {string} json JSON объект ReqPutCategoryVideo
         * @param {any} [picture] Картинка
         * @param {any} [video] Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPut(json, picture, video, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryvideoPut(json, picture, video, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Получение информации о видео курса
         * @param {number} categoryId Идентификатор курса
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideosGet(categoryId, offset, limit, options) {
            const localVarFetchArgs = exports.CategoryApiFetchParamCreator(configuration).categoryvideosGet(categoryId, offset, limit, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CategoryApi - factory interface
 * @export
 */
exports.CategoryApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Получение информации о курсах
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(offset, limit, options) {
            return exports.CategoryApiFp(configuration).categoriesGet(offset, limit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Удаление курса
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryDelete(categoryId, options) {
            return exports.CategoryApiFp(configuration).categoryDelete(categoryId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации о курсе
         * @param {number} categoryId Идентификатор курса
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryGet(categoryId, options) {
            return exports.CategoryApiFp(configuration).categoryGet(categoryId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Создание курса
         * @param {string} json JSON объект ReqPostCategory
         * @param {any} picture Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPost(json, picture, options) {
            return exports.CategoryApiFp(configuration).categoryPost(json, picture, options)(fetch, basePath);
        },
        /**
         *
         * @summary Изменение данных курса
         * @param {string} json JSON объект ReqPutCategory
         * @param {any} [picture] Картинка
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryPut(json, picture, options) {
            return exports.CategoryApiFp(configuration).categoryPut(json, picture, options)(fetch, basePath);
        },
        /**
         *
         * @summary Удаление видео из курса
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoDelete(categoryVideoId, options) {
            return exports.CategoryApiFp(configuration).categoryvideoDelete(categoryVideoId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации о видео в курсе
         * @param {number} categoryVideoId Идентификатор видео в курсе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoGet(categoryVideoId, options) {
            return exports.CategoryApiFp(configuration).categoryvideoGet(categoryVideoId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Создание видео в курсе
         * @param {string} json JSON объект ReqPostCategoryVideo
         * @param {any} picture Картинка
         * @param {any} video Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPost(json, picture, video, options) {
            return exports.CategoryApiFp(configuration).categoryvideoPost(json, picture, video, options)(fetch, basePath);
        },
        /**
         *
         * @summary Изменение данных видео в курсе
         * @param {string} json JSON объект ReqPutCategoryVideo
         * @param {any} [picture] Картинка
         * @param {any} [video] Видео
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideoPut(json, picture, video, options) {
            return exports.CategoryApiFp(configuration).categoryvideoPut(json, picture, video, options)(fetch, basePath);
        },
        /**
         *
         * @summary Получение информации о видео курса
         * @param {number} categoryId Идентификатор курса
         * @param {number} [offset] Смещение получения записей
         * @param {number} [limit] Лимит получения записей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryvideosGet(categoryId, offset, limit, options) {
            return exports.CategoryApiFp(configuration).categoryvideosGet(categoryId, offset, limit, options)(fetch, basePath);
        },
    };
};
/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
class CategoryApi extends BaseAPI {
    /**
     *
     * @summary Получение информации о курсах
     * @param {number} [offset] Смещение получения записей
     * @param {number} [limit] Лимит получения записей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoriesGet(offset, limit, options) {
        return exports.CategoryApiFp(this.configuration).categoriesGet(offset, limit, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Удаление курса
     * @param {number} categoryId Идентификатор курса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryDelete(categoryId, options) {
        return exports.CategoryApiFp(this.configuration).categoryDelete(categoryId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации о курсе
     * @param {number} categoryId Идентификатор курса
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryGet(categoryId, options) {
        return exports.CategoryApiFp(this.configuration).categoryGet(categoryId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Создание курса
     * @param {string} json JSON объект ReqPostCategory
     * @param {any} picture Картинка
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryPost(json, picture, options) {
        return exports.CategoryApiFp(this.configuration).categoryPost(json, picture, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Изменение данных курса
     * @param {string} json JSON объект ReqPutCategory
     * @param {any} [picture] Картинка
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryPut(json, picture, options) {
        return exports.CategoryApiFp(this.configuration).categoryPut(json, picture, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Удаление видео из курса
     * @param {number} categoryVideoId Идентификатор видео в курсе
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryvideoDelete(categoryVideoId, options) {
        return exports.CategoryApiFp(this.configuration).categoryvideoDelete(categoryVideoId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации о видео в курсе
     * @param {number} categoryVideoId Идентификатор видео в курсе
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryvideoGet(categoryVideoId, options) {
        return exports.CategoryApiFp(this.configuration).categoryvideoGet(categoryVideoId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Создание видео в курсе
     * @param {string} json JSON объект ReqPostCategoryVideo
     * @param {any} picture Картинка
     * @param {any} video Видео
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryvideoPost(json, picture, video, options) {
        return exports.CategoryApiFp(this.configuration).categoryvideoPost(json, picture, video, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Изменение данных видео в курсе
     * @param {string} json JSON объект ReqPutCategoryVideo
     * @param {any} [picture] Картинка
     * @param {any} [video] Видео
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryvideoPut(json, picture, video, options) {
        return exports.CategoryApiFp(this.configuration).categoryvideoPut(json, picture, video, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Получение информации о видео курса
     * @param {number} categoryId Идентификатор курса
     * @param {number} [offset] Смещение получения записей
     * @param {number} [limit] Лимит получения записей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    categoryvideosGet(categoryId, offset, limit, options) {
        return exports.CategoryApiFp(this.configuration).categoryvideosGet(categoryId, offset, limit, options)(this.fetch, this.basePath);
    }
}
exports.CategoryApi = CategoryApi;
/**
 * FileApi - fetch parameter creator
 * @export
 */
exports.FileApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Картинка
         * @param {number} fileId Идентификатор файла
         * @param {number} [width] Ширина картинки
         * @param {number} [height] Высота картинки
         * @param {number} [type] Тип трансформации картинки
         * @param {number} [blur] Размытие картинки
         * @param {number} [cornerRadius] Закругление углов картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictureGet(fileId, width, height, type, blur, cornerRadius, options = {}) {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling pictureGet.');
            }
            const localVarPath = `/picture`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }
            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (blur !== undefined) {
                localVarQueryParameter['blur'] = blur;
            }
            if (cornerRadius !== undefined) {
                localVarQueryParameter['corner_radius'] = cornerRadius;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Видео
         * @param {number} fileId Идентификатор файла
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoGet(fileId, options = {}) {
            // verify required parameter 'fileId' is not null or undefined
            if (fileId === null || fileId === undefined) {
                throw new RequiredError('fileId', 'Required parameter fileId was null or undefined when calling videoGet.');
            }
            const localVarPath = `/video`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            if (fileId !== undefined) {
                localVarQueryParameter['file_id'] = fileId;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FileApi - functional programming interface
 * @export
 */
exports.FileApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Картинка
         * @param {number} fileId Идентификатор файла
         * @param {number} [width] Ширина картинки
         * @param {number} [height] Высота картинки
         * @param {number} [type] Тип трансформации картинки
         * @param {number} [blur] Размытие картинки
         * @param {number} [cornerRadius] Закругление углов картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictureGet(fileId, width, height, type, blur, cornerRadius, options) {
            const localVarFetchArgs = exports.FileApiFetchParamCreator(configuration).pictureGet(fileId, width, height, type, blur, cornerRadius, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Видео
         * @param {number} fileId Идентификатор файла
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoGet(fileId, options) {
            const localVarFetchArgs = exports.FileApiFetchParamCreator(configuration).videoGet(fileId, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * FileApi - factory interface
 * @export
 */
exports.FileApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Картинка
         * @param {number} fileId Идентификатор файла
         * @param {number} [width] Ширина картинки
         * @param {number} [height] Высота картинки
         * @param {number} [type] Тип трансформации картинки
         * @param {number} [blur] Размытие картинки
         * @param {number} [cornerRadius] Закругление углов картинки
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pictureGet(fileId, width, height, type, blur, cornerRadius, options) {
            return exports.FileApiFp(configuration).pictureGet(fileId, width, height, type, blur, cornerRadius, options)(fetch, basePath);
        },
        /**
         *
         * @summary Видео
         * @param {number} fileId Идентификатор файла
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videoGet(fileId, options) {
            return exports.FileApiFp(configuration).videoGet(fileId, options)(fetch, basePath);
        },
    };
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
class FileApi extends BaseAPI {
    /**
     *
     * @summary Картинка
     * @param {number} fileId Идентификатор файла
     * @param {number} [width] Ширина картинки
     * @param {number} [height] Высота картинки
     * @param {number} [type] Тип трансформации картинки
     * @param {number} [blur] Размытие картинки
     * @param {number} [cornerRadius] Закругление углов картинки
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    pictureGet(fileId, width, height, type, blur, cornerRadius, options) {
        return exports.FileApiFp(this.configuration).pictureGet(fileId, width, height, type, blur, cornerRadius, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @summary Видео
     * @param {number} fileId Идентификатор файла
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    videoGet(fileId, options) {
        return exports.FileApiFp(this.configuration).videoGet(fileId, options)(this.fetch, this.basePath);
    }
}
exports.FileApi = FileApi;
/**
 * PushApi - fetch parameter creator
 * @export
 */
exports.PushApiFetchParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Создание push-уведомления
         * @param {ReqPostPush} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushPost(body, options = {}) {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling pushPost.');
            }
            const localVarPath = `/push`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication basic required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ReqPostPush" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PushApi - functional programming interface
 * @export
 */
exports.PushApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Создание push-уведомления
         * @param {ReqPostPush} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushPost(body, options) {
            const localVarFetchArgs = exports.PushApiFetchParamCreator(configuration).pushPost(body, options);
            return (fetch = portableFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return optimisation(response.json());
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * PushApi - factory interface
 * @export
 */
exports.PushApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         *
         * @summary Создание push-уведомления
         * @param {ReqPostPush} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pushPost(body, options) {
            return exports.PushApiFp(configuration).pushPost(body, options)(fetch, basePath);
        },
    };
};
/**
 * PushApi - object-oriented interface
 * @export
 * @class PushApi
 * @extends {BaseAPI}
 */
class PushApi extends BaseAPI {
    /**
     *
     * @summary Создание push-уведомления
     * @param {ReqPostPush} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PushApi
     */
    pushPost(body, options) {
        return exports.PushApiFp(this.configuration).pushPost(body, options)(this.fetch, this.basePath);
    }
}
exports.PushApi = PushApi;
function firstUpper(i) {
    return i.substr(0, 1).toUpperCase() + i.substr(1);
}
function mainOptimisation(data) {
    let outData = {};
    for (let key in data) {
        let value = data[key];
        if (/_/.test(key))
            key = key.split('_').map((e, i) => i === 0 ? e :
                firstUpper(e)).join('');
        outData[key] = typeof value !== "object" ?
            value : mainOptimisation(value);
    }
    return outData;
}
async function optimisation(data) {
    if (data instanceof Promise)
        data = await data;
    return mainOptimisation(data);
}
